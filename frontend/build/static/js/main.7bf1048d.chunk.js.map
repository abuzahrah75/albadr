{"version":3,"sources":["components/MyMenu.js","components/NavBar.js","components/pages/Utama.js","components/pages/Projek.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["MyMenu","props","React","useState","anchorEl","setAnchorEl","history","useHistory","handleClose","menuClicked","linkData","push","Button","aria-controls","aria-haspopup","color","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Navbar","classes","className","AppBar","position","Toolbar","Typography","variant","Utama","Projek","About","App","path","exact","component","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUAOe,SAASA,EAAOC,GAAQ,IAAD,EACJC,IAAMC,SAAS,MADX,mBAC7BC,EAD6B,KACnBC,EADmB,KAEhCC,EAAUC,cAMRC,EAAc,WAClBH,EAAY,OAGRI,EAAc,SAACC,GACnBJ,EAAQK,KAAKD,GACbF,KAGF,OACE,6BACE,kBAACI,EAAA,EAAD,CAAQC,gBAAc,cAAcC,gBAAc,OAAOC,MAAM,UAAUC,QAfzD,SAACC,GACnBZ,EAAYY,EAAMC,iBAehB,kBAAC,IAAD,OAGA,kBAACC,EAAA,EAAD,CACEC,GAAG,cACHhB,SAAUA,EACViB,aAAW,EACXC,KAAMC,QAAQnB,GACdoB,QAAShB,GAET,kBAACiB,EAAA,EAAD,CAAUT,QAAS,kBAAKP,EAAY,OAApC,QACA,kBAACgB,EAAA,EAAD,CAAUT,QAAS,kBAAKP,EAAY,aAApC,mBACA,kBAACgB,EAAA,EAAD,CAAUT,QAAS,kBAAKP,EAAY,YAApC,kBC9BR,IAAMiB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAIC,SAASK,IACtB,IAAMC,EAAUV,IAChB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACxC,EAAD,MACA,kBAACyC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAA5C,2BClBKS,MARf,WACI,OACI,6BACI,iECSGC,MAVf,WACI,OACI,6BACI,kBAACH,EAAA,EAAD,CAAYC,QAAQ,MAApB,qCCGGG,MARf,WACI,OACI,6BACI,4DCqBGC,MAff,WACE,OACE,yBAAKT,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,IAAD,KACO,kBAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,EAACC,UAAWN,IACjC,kBAAC,IAAD,CAAOI,KAAK,UAAUC,OAAK,EAACC,UAAWL,IACvC,kBAAC,IAAD,CAAOG,KAAK,SAASC,OAAK,EAACC,UAAWJ,IAEtC,kBAAC,IAAD,CAAOE,KAAK,IAAIE,UAAY,iBAAK,sBCRzB1B,QACW,cAA7B2B,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAD,KACA,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7bf1048d.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {useHistory} from 'react-router-dom'\n\nexport default function MyMenu(props) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  let history = useHistory()\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const menuClicked = (linkData)=>{\n    history.push(linkData)\n    handleClose()\n  }\n\n  return (\n    <div>\n      <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" color=\"inherit\" onClick={handleClick}>\n      <MenuIcon />\n      </Button>\n     \n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={()=> menuClicked('/')}>Home</MenuItem>\n        <MenuItem onClick={()=> menuClicked('/projek')}>My Digital Docs</MenuItem>\n        <MenuItem onClick={()=> menuClicked('/about')}>About albadr</MenuItem>\n\n{/* \n        <MenuItem onClick={()=> menuClicked('/tobuy')}>To Buy</MenuItem>\n        <MenuItem onClick={()=> menuClicked('/todo')}>To Do</MenuItem>\n        <MenuItem onClick={()=> menuClicked('/todev')}>To Dev.</MenuItem> */}\n        {/* <MenuItem onClick={()=> menuClicked('/toAdmin')}>To Admin</MenuItem> */}\n      </Menu>\n    </div>\n  );\n}","import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport MyMenu from './MyMenu';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Navbar() {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <MyMenu />\n          <Typography variant=\"h6\" className={classes.title}>\n           albadr.abuzahrah.com\n          </Typography>\n          \n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import React from 'react'\n\nfunction Utama() {\n    return (\n        <div>\n            <h1>albadr.abuzahrah.com main page.</h1>\n        </div>\n    )\n}\n\nexport default Utama\n","import React from 'react'\n// import { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nfunction Projek() {\n    return (\n        <div>\n            <Typography variant=\"h6\">\n           Digital Documents Projects List\n          </Typography>\n        </div>\n    )\n}\n\nexport default Projek\n","import React from 'react'\n\nfunction About() {\n    return (\n        <div>\n            <h1>About albadr.abuzahrah.com</h1>\n        </div>\n    )\n}\n\nexport default About\n","import React from 'react';\n\nimport {Route, Switch,} from 'react-router-dom'\n\nimport './App.css';\n\nimport NavBar from './components/NavBar'\nimport Utama from './components/pages/Utama'\nimport Projek from './components/pages/Projek'\nimport About from './components/pages/About'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <NavBar />\n     <Switch>\n            <Route path=\"/\" exact component={Utama} />\n            <Route path=\"/projek\" exact component={Projek} />\n            <Route path=\"/about\" exact component={About} />\n\n            <Route path=\"*\" component={ ()=> \"404 NOT FOUND\"}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}